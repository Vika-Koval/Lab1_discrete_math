def kruskals_algorithm(graph: nx.classes.graph.Graph) -> list:
    '''Kruskal's algorithm implementation'''

    edges = sorted([(a,b,c['weight']) for a,b,c in list(graph.edges(data=True))], key= lambda x: x[2])
    mst_kraskal = []
    nodes_set = disjoint_set(list(graph.nodes))

    for v,u, _ in edges:
        if find(nodes_set, v) != find(nodes_set, u):
            mst_kraskal.append((v, u))
            union(nodes_set, v, u)
    return mst_kraskal

def find(nodes_set: dict, vertex: int):
    if nodes_set[vertex] != vertex:
        nodes_set[vertex] = find(nodes_set, nodes_set[vertex])
    return nodes_set[vertex]

def disjoint_set(list_of_vertices: list):
    return {k:k for k in list_of_vertices}

def union(nodes_set: dict, vertex1:int, vertex2:int):
    nodes_set[find(nodes_set, vertex1)] = find(nodes_set, vertex2)
