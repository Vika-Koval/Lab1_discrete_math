def Bellman_Ford_algorithm(edges=list(G.edges(data=True)), first_node=0):
    num_nodes = max(max(edge[0], edge[1]) for edge in edges) + 1
    distance = [float('inf')] * num_nodes
    distance[first_node] = 0
    summary=''
    for _ in range(num_nodes - 1):
        for source, dest, edge_data in edges:
            weight = edge_data['weight']
            if distance[dest] > distance[source] + weight:
                distance[dest] = distance[source] + weight
    for source, dest, edge_data in edges:
        weight = edge_data['weight']
        if distance[dest] > distance[source] + weight:
            return "Negative cycle detected"
    for k, v in enumerate(distance):
        summary += f"Distance to {k}: {v}\n"
    return summary
print(Bellman_Ford_algorithm())


def Floyd_Warshall_algorithm(edges=list(G.edges(data=True))):
    num_nodes = max(max(edge[0], edge[1]) for edge in edges) + 1
    distances_with_source = {}
    summary=''
    for source in range(num_nodes):
        distance = {node: float('inf') for node in range(num_nodes)}
        distance[source] = 0
        for _ in range(num_nodes - 1):
            for source_node, dest_node, edge_data in edges:
                weight = edge_data['weight']
                if distance[dest_node] > distance[source_node] + weight:
                    distance[dest_node] = distance[source_node] + weight
        distances_with_source[source] = distance
        for source_node, dest_node, edge_data in edges:
            weight = edge_data['weight']
            if distance[dest_node] > distance[source_node] + weight:
                return "Negative cycle detected"
    for source, dist in distances_with_source.items():
        dist_str = ', '.join([f"{node}: {dist}" for node, dist in dist.items()])
        summary+=f"Distances with {source} source: {{{dist_str}}}\n"
    return summary
print(Floyd_Warshall_algorithm())


def kruskals_algorithm(graph: nx.classes.graph.Graph) -> list:
    '''Kruskal's algorithm implementation'''

    edges = sorted([(a,b,c['weight']) for a,b,c in list(graph.edges(data=True))], key= lambda x: x[2])
    mst_kraskal = []
    nodes_set = disjoint_set(list(graph.nodes))

    for v,u, _ in edges:
        if find(nodes_set, v) != find(nodes_set, u):
            mst_kraskal.append((v, u))
            union(nodes_set, v, u)
    return mst_kraskal

def find(nodes_set: dict, vertex: int):
    if nodes_set[vertex] != vertex:
        nodes_set[vertex] = find(nodes_set, nodes_set[vertex])
    return nodes_set[vertex]

def disjoint_set(list_of_vertices: list):
    return {k:k for k in list_of_vertices}

def union(nodes_set: dict, vertex1:int, vertex2:int):
    nodes_set[find(nodes_set, vertex1)] = find(nodes_set, vertex2)



def prims_algorithm(graph: nx.classes.graph.Graph) -> list:
    '''prim's algorithm implementation'''
    prim_mst = []
    visited = set()
    visited.add(list(graph.nodes)[0])
    edges = sorted([(u, v, w['weight']) for u, v, w in list(graph.edges(data = True))], key = lambda x: x[2])
    while visited != set(graph.nodes):
        for u, v, _ in edges:
            if (u in visited and v not in visited):
                prim_mst.append((u, v))
                visited.add(v)
                edges.remove((u,v,_))
                break
            if (v in visited and u not in visited):
                prim_mst.append((u, v))
                visited.add(u)
                edges.remove((u,v,_))
                break
    return prim_mst






class MyDecisionTreeClassifier:

    def __init__(self, max_depth, classes, predictions):
        self.max_depth = max_depth
        self.__classes = classes
        self.predictions = predictions

    def gini(self, groups, classes):
        '''
        A Gini score gives an idea of how good a split is by how mixed the
        classes are in the two groups created by the split.

        A perfect separation results in a Gini score of 0,
        whereas the worst case split that results in 50/50
        classes in each group result in a Gini score of 0.5
        (for a 2 class problem).
        '''
        gini = 0
        num_of_inst = sum([len(group) for group in groups])
        for group in groups:
            size = len(group)
            if size == 0:
                continue
            score = 0
            for class_var in classes:
                p = [row[-1] for row in group].count(class_var) / size
                score += p*p
            gini += (1 - score) * (size / num_of_inst)
        return gini

    def split_data(self, X, y) -> tuple[int, int]:

        m = y.size
        if m <= 1:
            return None, None

        num_parent = [np.sum(y == c) for c in range(self.n_classes_)]
        best_gini = 1.0 - sum((n / m) ** 2 for n in num_parent)
        best_idx, best_thr = None, None

        for idx in range(self.n_features_):
            thresholds, classes = zip(*sorted(zip(X[:, idx], y)))

            num_left = [0] * self.n_classes_
            num_right = num_parent.copy()
            for i in range(1, m):
                c = classes[i - 1]
                num_left[c] += 1
                num_right[c] -= 1
                gini_left = 1.0 - sum(
                    (num_left[x] / i) ** 2 for x in range(self.n_classes_)
                )
                gini_right = 1.0 - sum(
                    (num_right[x] / (m - i)) ** 2 for x in range(self.n_classes_)
                )

                gini = (i * gini_left + (m - i) * gini_right) / m

                if thresholds[i] == thresholds[i - 1]:
                    continue

                if gini < best_gini:
                    best_gini = gini
                    best_idx = idx
                    best_thr = (thresholds[i] + thresholds[i - 1]) / 2

        return best_idx, best_thr

    def build_tree(self, X, y, depth = 0):
        num_samples_per_class = [np.sum(y == i) for i in range(self.n_classes_)]
        predicted_class = np.argmax(num_samples_per_class)
        gin = 1.0 - sum((n / y.size) ** 2 for n in num_samples_per_class)
        node = Node(
            gini=gin,
            X=num_samples_per_class,
            y=predicted_class,
        )

        if depth < self.max_depth:
            idx, thr = self.split_data(X, y)
            if idx is not None:
                indices_left = X[:, idx] < thr
                X_left, y_left = X[indices_left], y[indices_left]
                X_right, y_right = X[~indices_left], y[~indices_left]
                node.feature_index = idx
                node.threshold = thr
                node.left = self.build_tree(X_left, y_left, depth + 1)
                node.right = self.build_tree(X_right, y_right, depth + 1)
        return node

    def fit(self, X, y):
        self.n_classes_ = len(set(y))
        self.n_features_ = X.shape[1]
        self.tree_ = self.build_tree(X, y)

    def predict(self, X_test):
        return [self._predict(inputs) for inputs in X_test]

    def _predict(self, inputs):
        """Predict class for a single sample."""
        node = self.tree_
        while node.left:
            if inputs[node.feature_index] < node.threshold:
                node = node.left
            else:
                node = node.right
        return node.predicted_class

    def evaluate(self, X_test, y_test):
        predictions = self.predict(X_test)
        return sum(predictions == y_test) / len(y_test)
